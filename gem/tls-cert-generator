#!/usr/bin/env ruby

require 'thor'
require 'ostruct'

module Sh
  def self.run_command(command)
    stdout = `#{command}`
    OpenStruct.new({
      success?: $?.exitstatus == 0,
      exitstatus: $?.exitstatus,
      stdout: stdout
    })
  end
end

module Filenames
  def self.name(opts, n, file)
    if n && n > 0
      "#{opts[:output_dir]}/#{n}-#{file}"
    else
      "#{opts[:output_dir]}/#{file}"
    end
  end

  def self.ca_key(opts, file='ca.key')          name(opts, 0, file) end
  def self.ca_crt(opts, file='ca.crt')          name(opts, 0, file) end
  def self.ca_srl(opts, file='ca.srl')          name(opts, 0, file) end
  def self.in_ca_key(opts, n, file='in-ca.key') name(opts, n, file) end
  def self.in_ca_crt(opts, n, file='in-ca.crt') name(opts, n, file) end
  def self.in_ca_srl(opts, n, file='in-ca.srl') name(opts, n, file) end
  def self.client_key(opts, file='client.key')  name(opts, 0, file) end
  def self.client_crt(opts, file='client.crt')  name(opts, 0, file) end
  def self.client_csr(opts, file='client.csr')  name(opts, 0, file) end
  def self.client_pfx(opts, file='client.pfx')  name(opts, 0, file) end
  def self.client_pem(opts, file='client.pem')  name(opts, 0, file) end
  def self.server_key(opts, file='server.key')  name(opts, 0, file) end
  def self.server_crt(opts, file='server.crt')  name(opts, 0, file) end
  def self.server_csr(opts, file='server.csr')  name(opts, 0, file) end
  def self.server_pfx(opts, file='server.pfx')  name(opts, 0, file) end
  def self.server_pem(opts, file='server.pem')  name(opts, 0, file) end
end

class TlsCertGenerator < Thor
  class_option :output_dir, type: :string, aliases: 'o', default: '/opt/app-root/generated'
  class_option :verbose, type: :boolean, aliases: 'v', default: false
  class_option :clobber, type: :boolean, aliases: 'x', default: false

  desc 'ca', 'Generate a new root CA and specified number of intermediates'
  option :hostname, type: :string, aliases: 'h', required: true
  option :intermediate, type: :boolean, aliases: 'i', default: false
  option :country, type: :string, aliases: 'c', default: 'US'
  option :state, type: :string, aliases: 's', default: 'ID'
  option :locality, type: :string, aliases: 'l', default: 'Boise'
  option :organization_name, type: :string, aliases: 'n', default: 'ExampleBank'
  option :organization_unit_name, type: :string, aliases: 'u', default: ''
  option :email, type: :string, aliases: 'e', default: '_'
  def ca
    verbose(options, "Generating CA with options: #{options}")
    generate_ca_key_and_crt(
      options,
      intermediate: false,
      use_existing: false
    )
    if options[:intermediate]
      generate_ca_key_and_crt(
        options,
        intermediate: true,
        use_existing: false
      ) 
      sign_in_ca_key_and_crt(options)
    end
  end

  desc 'client', 'Generate a new client cert and key for TLS'
  option :hostname, type: :string, aliases: 'h', required: true
  option :intermediate, type: :boolean, aliases: 'i', default: false
  option :pfx, type: :boolean, aliases: 'p', default: false
  option :country, type: :string, aliases: 'c', default: 'US'
  option :state, type: :string, aliases: 's', default: 'ID'
  option :locality, type: :string, aliases: 'l', default: 'Boise'
  option :organization_name, type: :string, aliases: 'o', default: 'ExampleBank'
  option :organization_unit_name, type: :string, aliases: 'u', default: ''
  option :email, type: :string, aliases: 'e', default: '_'
  def client
    verbose(options, "Generating client key and cert with options: #{options}")
    generate_ca_key_and_crt(options, use_existing: true)
    generate_client_key_and_csr(options)
    sign_client_crt(options)
    create_client_pem(options)
    create_client_pfx(options) if options[:pfx]
  end

  desc 'server', 'Generate a new server cert and key for TLS'
  option :hostname, type: :string, aliases: 'h', required: true
  option :intermediate, type: :boolean, aliases: 'i', default: false
  option :pfx, type: :boolean, aliases: 'p', default: false
  option :country, type: :string, aliases: 'c', default: 'US'
  option :state, type: :string, aliases: 's', default: 'ID'
  option :locality, type: :string, aliases: 'l', default: 'Boise'
  option :organization_name, type: :string, aliases: 'o', default: 'ExampleBank'
  option :organization_unit_name, type: :string, aliases: 'u', default: ''
  option :email, type: :string, aliases: 'e', default: '_'
  def server
    verbose(options, "Generating server key and cert with options: #{options}")
    generate_ca_key_and_crt(options, use_existing: true)
    generate_server_key_and_csr(options)
    sign_server_crt(options)
    create_server_pem(options)
    create_server_pfx(options) if options[:pfx]
  end

  private

  def verbose(options, msg)
    if verbose?(options)
      puts "[DEBUG]: #{msg}"
    end
  end

  def generate_ca_key_and_crt(options, is_intermediate:, use_existing: true)
    verbose(options, 'Entering method generate_ca_key_and_crt')
    key_outfile = if is_intermediate
                    Filenames.in_ca_key(options, 1)
                  else
                    Filenames.ca_key(options)
                  end
    crt_outfile = if is_intermediate
                    Filenames.in_ca_crt(options, 1)
                  else
                    Filenames.ca_crt(options)
                  end
    verbose(options, "key_outfile is '#{key_outfile}'")
    verbose(options, "crt_outfile is '#{crt_outfile}'")
    if use_existing && File.exist?(key_outfile)
      verbose(options, 'Using existing root CA Key and Crt')
    else
      if confirm_overwrite(options, key_outfile)
        verbose(options, "Overwrite for file '#{key_outfile}' confirmed")
        openssl %W[
          req
          -nodes
          -x509
          -newkey rsa:2048
          -keyout #{key_outfile}
          -out #{crt_outfile}
          -subj #{openssl_subj(options)}
        ]
        verbose(options, 'Done generating root ca key and crt')
      else
        puts "Not generating root ca key and cert because file '#{key_outfile}' already exists and user declined to overwrite"
      end
    end
  end

  def sign_in_ca_key_and_crt(options)
    # TODO - finish support for intermediate CA
    #openssl %W[
    #  ca
    #  -config openssl.cnf
    #  -extensions v3_intermediate_ca
    #  -in intermediate/csr/intermediate.csr.pem
    #  -out intermediate/certs/intermediate.cert.pem
    #]
  end

  def generate_server_key_and_csr(options)
    outfile = Filenames.server_key(options)
    if confirm_overwrite(options, outfile)
      openssl %W[
        req
        -nodes
        -newkey rsa:2048
        -keyout #{outfile}
        -out #{Filenames.server_csr(options)}
        -subj #{openssl_subj(options)}
      ]
    else
      puts "Not generating server key and csr because file '#{outfile}' already exists and user declined to overwrite"
    end
  end

  def sign_server_crt(options)
    # TODO - Add support for signing with the intermediate CA
    outfile = Filenames.server_crt(options)
    if confirm_overwrite(options, outfile)
      openssl %W[
        x509
        -req
        -in #{Filenames.server_csr(options)}
        -CA #{Filenames.ca_crt(options)}
        -CAkey #{Filenames.ca_key(options)}
        -CAcreateserial
        -out #{outfile}
      ]
    else
      puts "Not generating server cert because file '#{outfile}' already exists and user declined to overwrite"
    end
  end

  def create_pem(opts:, key:, crt:, pem:)
    verbose(opts, '')
    cmd = "cat #{key} #{crt} > #{pem}"
    unless Sh.run_command(cmd).success?
      puts "Encountered error running '#{cmd}'"
      exit 1
    end
  end

  def create_server_pem(options)
    create_pem(
      opts: options,
      key: Filenames.server_key(options),
      crt: Filenames.server_crt(options),
      pem: Filenames.server_pem(options)
    )
  end

  def generate_client_key_and_csr(options)
    outfile = Filenames.client_key(options)
    if confirm_overwrite(options, outfile)
      openssl %W[
        req
        -nodes
        -newkey rsa:2048
        -keyout #{outfile}
        -out #{Filenames.client_csr(options)}
        -subj #{openssl_subj(options)}
      ]
    else
      puts "Not generating client key and csr because file '#{outfile}' already exists and user declined to overwrite"
    end
  end

  def sign_client_crt(options)
    # TODO - Add support for signing with the intermediate CA
    outfile = Filenames.client_crt(options)
    if confirm_overwrite(options, outfile)
      openssl %W[
        x509
        -req
        -in #{Filenames.client_csr(options)}
        -CA #{Filenames.ca_crt(options)}
        -CAkey #{Filenames.ca_key(options)}
        -CAcreateserial
        -out #{outfile}
      ]
        #-CAserial #{Filenames.ca_srl(options)}
    else
      puts "Not signing client cert because file '#{outfile}' already exists and user declined to overwrite"
    end
  end

  def create_client_pem(options)
    create_pem(
      opts: options,
      key: Filenames.client_key(options),
      crt: Filenames.client_crt(options),
      pem: Filenames.client_pem(options)
    )
  end

  def create_client_pfx(options)
    outfile = Filenames.client_pfx(options)
    if confirm_overwrite(options, outfile)
      openssl %W[
        pkcs12
        -inkey #{Filenames.client_key(options)}
        -in #{Filenames.client_crt(options)}
        -export
        -out #{outfile}
      ]
    else
      puts "Not generating client pfx because file '#{outfile}' already exists and user declined to overwrite"
    end
  end

  def create_server_pfx(options)
    outfile = Filenames.server_pfx(options)
    if confirm_overwrite(options, outfile)
      openssl %W[
        pkcs12
        -inkey #{Filenames.server_key(options)}
        -in #{Filenames.server_crt(options)}
        -export
        -out #{outfile}
      ]
    else
      puts "Not generating server pfx because file '#{outfile}' already exists and user declined to overwrite"
    end
  end

  def verbose?(options)
    !!options[:verbose]
  end

  def which_openssl
    openssl ||= `which openssl`.chomp
    openssl
  end

  def openssl(args)
    cmd = "#{which_openssl} #{args.join(' ')}"
    unless Sh.run_command(cmd).success?
      puts "Encountered error running command '#{cmd}'"
      exit 1
    end
  end

  def openssl_subj(options)
    "/C=#{options[:country]}/ST=#{options[:state]}/L=#{options[:locality]}/O=#{options[:organization_name]}/OU=#{options[:organization_unit_name]}/CN=#{options[:hostname]}/emailAddress=#{options[:email]}"
  end

  def confirm_overwrite(options, filename)
    if options[:clobber]
      true
    elsif File.exist?(filename)
      print "The file '#{filename}' already exists but will be overwritten.  Continue? (Y/N): "
      STDIN.gets.chomp =~ /^y/i
    else
      true
    end
  end
end

def set_working_dir(options)
  FileUtils.mkdir_p(options[:output_dir]) unless Dir.exist?(options[:output_dir])
  FileUtils.chdir(options[:output_dir])
end

def main(args)
  if args.empty? || args.first =~ /-?-?h(elp)?$/i
    # display thor's built in help
    puts 'For more information about a command, use:

    tls-cert-generator help <command>

  E.G.:

    tls-cert-generator help client
    '
    TlsCertGenerator.start(%w[help])
  else
    TlsCertGenerator.start(args)
  end
end

main ARGV.dup
